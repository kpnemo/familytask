import OpenAI from 'openai';
import { FamilyContext } from '../mcp/family-context';
import { isTaskOverdue } from '../utils';

export interface AnalyticsQuery {
  question: string;
  timeframe?: string;
  targetMember?: string;
  language?: 'en' | 'ru' | 'auto'; // Add language support
}

export interface AnalyticsResponse {
  answer: string;
  data: {
    metrics?: Record<string, any>;
    insights?: string[];
    recommendations?: string[];
    charts?: Array<{
      type: 'bar' | 'line' | 'pie';
      title: string;
      data: any[];
    }>;
  };
  confidence: number;
  detectedLanguage?: string;
}

export class OpenAIAnalyticsEngine {
  private openai: OpenAI;

  constructor() {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY environment variable is required');
    }
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }

  // Language detection utility
  private detectLanguage(text: string): 'en' | 'ru' | 'unknown' {
    // Simple language detection based on Cyrillic characters
    const cyrillicPattern = /[\u0400-\u04FF]/;
    const hasRussian = cyrillicPattern.test(text);
    
    // Check for common Russian words
    const russianWords = /\b(–∑–∞–¥–∞—á[–∞–µ–∏–æ—É—ã—ç—è—é]|—Å–µ–º—å[—è–µ—é]|—Ä–µ–±–µ–Ω[–æ–∫–∫]|—Ä–æ–¥–∏—Ç–µ–ª[—å–∏—è–µ]|–¥–æ–º|—Å–¥–µ–ª–∞—Ç—å|–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–Ω–µ–¥–µ–ª—è|–º–µ—Å—è—Ü|–æ—á–∫–∏|–±–∞–ª–ª—ã)\b/i;
    
    if (hasRussian || russianWords.test(text)) {
      return 'ru';
    }
    
    // Check for common English words
    const englishWords = /\b(task|family|child|parent|home|do|tomorrow|today|yesterday|week|month|points)\b/i;
    
    if (englishWords.test(text)) {
      return 'en';
    }
    
    return 'unknown';
  }

  async analyzeFamily(
    query: AnalyticsQuery,
    familyContext: FamilyContext,
    retryCount: number = 0
  ): Promise<AnalyticsResponse> {
    try {
      // Detect language if not specified
      const detectedLanguage = query.language === 'auto' || !query.language 
        ? this.detectLanguage(query.question)
        : query.language;

      const prompt = this.buildAnalyticsPrompt(query, familyContext, detectedLanguage);
      
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o', // Latest GPT-4o model - excellent for multilingual tasks
        max_tokens: 1500,
        temperature: 0.2,
        messages: [
          {
            role: 'system',
            content: this.getSystemPrompt(detectedLanguage)
          },
          {
            role: 'user',
            content: prompt
          }
        ],
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No response content from OpenAI');
      }

      const result = this.parseAnalyticsResponse(content);
      return {
        ...result,
        detectedLanguage: detectedLanguage === 'unknown' ? 'en' : detectedLanguage
      };
    } catch (error) {
      console.error(`Error analyzing family data (attempt ${retryCount + 1}):`, error);
      
      // Retry once if this is the first attempt and the error is parsing-related
      if (retryCount === 0 && (error instanceof SyntaxError || error.message.includes('JSON'))) {
        console.log('Retrying analytics request due to parsing error...');
        return this.analyzeFamily(query, familyContext, 1);
      }
      
      // Return error message in detected language
      const detectedLanguage = this.detectLanguage(query.question);
      const errorMessage = detectedLanguage === 'ru' 
        ? "–£ –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        : "I'm having trouble analyzing the data right now. Please try again.";
      
      return {
        answer: errorMessage,
        data: {},
        confidence: 0.0,
        detectedLanguage: detectedLanguage === 'unknown' ? 'en' : detectedLanguage
      };
    }
  }

  private getSystemPrompt(language: 'en' | 'ru' | 'unknown'): string {
    if (language === 'ru') {
      return `–í—ã - —Å–µ–º–µ–π–Ω—ã–π –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ–º–µ–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å insights –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –û—Ç–≤–µ—á–∞–π—Ç–µ –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ë—É–¥—å—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º–∏
- –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–µ–º–µ–π–Ω—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
- –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ
- –ü–æ–æ—â—Ä—è–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
- –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¢–û–õ–¨–ö–û —Å –ø–æ–ª—è–º–∏: answer (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç), data (–ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç), confidence. –ù–ï –≤–∫–ª—é—á–∞–π—Ç–µ —Å—ã—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ –º–∞—Å—Å–∏–≤—ã –≤ –ø–æ–ª–µ answer - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫.`;
    }
    
    return `You are a family task analytics AI assistant for a family task management system. Analyze family data and answer user questions with insights and recommendations IN ENGLISH.

Key principles:
- Respond ONLY in English
- Be positive and encouraging
- Focus on family values
- Use specific numbers and percentages
- Compare family members fairly and constructively
- Encourage good behavior
- Provide actionable advice

CRITICAL: Respond in JSON format ONLY with fields: answer (formatted text), data (empty object), confidence. Do NOT include raw objects or arrays in the answer field - format all data as readable text with bullet points and line breaks.`;
  }

  private buildAnalyticsPrompt(query: AnalyticsQuery, familyContext: FamilyContext, language: 'en' | 'ru' | 'unknown'): string {
    const familyMembers = familyContext.members.map(m => ({
      name: m.name,
      role: m.role,
      id: m.id
    }));

    const activeTasks = familyContext.activeTasks;
    const completionHistory = familyContext.completionHistory;
    const pointsData = familyContext.pointsData;

    // Calculate basic metrics
    const totalActiveTasks = activeTasks.length;
    const completedTasks = completionHistory.length;
    const overdueTasks = activeTasks.filter(task => isTaskOverdue(new Date(task.dueDate))).length;
    
    // Per-member statistics
    const memberStats = familyMembers.map(member => {
      const memberActiveTasks = activeTasks.filter(task => task.assignedTo === member.id);
      const memberCompletions = completionHistory.filter(task => task.assignedTo === member.id);
      const memberPoints = pointsData.filter(p => p.userId === member.id);
      const totalPoints = memberPoints.reduce((sum, p) => sum + p.amount, 0);

      return {
        name: member.name,
        role: member.role,
        activeTasks: memberActiveTasks.length,
        completedTasks: memberCompletions.length,
        totalPoints,
        averagePoints: memberCompletions.length > 0 ? totalPoints / memberCompletions.length : 0,
        overdueTasks: memberActiveTasks.filter(task => isTaskOverdue(new Date(task.dueDate))).length,
        completionRate: (memberActiveTasks.length + memberCompletions.length) > 0 
          ? memberCompletions.length / (memberActiveTasks.length + memberCompletions.length) 
          : 0
      };
    });

    if (language === 'ru') {
      return `–ê–ù–ê–õ–ò–ó –°–ï–ú–ï–ô–ù–´–• –î–ê–ù–ù–´–•:

–ß–ª–µ–Ω—ã —Å–µ–º—å–∏: ${JSON.stringify(familyMembers, null, 2)}
–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${totalActiveTasks}
–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–Ω–µ–¥–∞–≤–Ω–æ): ${completedTasks}
–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${overdueTasks}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ß–õ–ï–ù–ê–ú –°–ï–ú–¨–ò:
${JSON.stringify(memberStats, null, 2)}

–ù–ï–î–ê–í–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:
${JSON.stringify(completionHistory.slice(-10), null, 2)}

–ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:
${JSON.stringify(activeTasks, null, 2)}

–î–ê–ù–ù–´–ï –û –ë–ê–õ–õ–ê–•:
${JSON.stringify(pointsData.slice(-20), null, 2)}

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: "${query.question}"
${query.timeframe ? `–í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò: ${query.timeframe}` : ''}
${query.targetMember ? `–§–û–ö–£–° –ù–ê: ${query.targetMember}` : ''}

–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ê–ù–ê–õ–ò–ó–£:
1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä—è–º–æ –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ
2. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ insights
3. –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ
5. –ë—É–¥—å—Ç–µ –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏ —Å–µ–º–µ–π–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
7. –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ
8. –í–ê–ñ–ù–û: –ù–ï –≤–∫–ª—é—á–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –∏–ª–∏ JSON –≤ –æ—Ç–≤–µ—Ç - —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (JSON):
{
  "answer": "–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\nKid1:\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: 8\n‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: 33\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 3\n\nErik:\n‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: 2\n‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞–ª–ª–æ–≤: 13\n‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 1\n\nüí° –ò–Ω—Å–∞–π—Ç—ã:\n–û—Å—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏–∑...",
  "data": {},
  "confidence": 0.9
}

–ü–†–ò–ú–ï–†–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–• –û–¢–í–ï–¢–û–í:
- "–≠—Ä–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª 8 –∏–∑ 10 –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ (80% –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"
- "–£ –°–∞—Ä—ã —Å–µ—Ä–∏—è –∏–∑ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!"
- "–°–µ–º—å—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞ 85% –∑–∞–¥–∞—á –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ, —á—Ç–æ –±–æ–ª—å—à–µ —á–µ–º 70% –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ"
- "–î–∂–æ–Ω–Ω–∏ —Ç—Ä—É–¥–Ω–æ –¥–∞—é—Ç—Å—è –∑–∞–¥–∞—á–∏ –≤ –±—É–¥–Ω–∏ - —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ"`;
    }

    return `FAMILY DATA ANALYSIS:

Family Members: ${JSON.stringify(familyMembers, null, 2)}
Total Active Tasks: ${totalActiveTasks}
Completed Tasks (recent): ${completedTasks}
Overdue Tasks: ${overdueTasks}

MEMBER STATISTICS:
${JSON.stringify(memberStats, null, 2)}

RECENT TASK COMPLETIONS:
${JSON.stringify(completionHistory.slice(-10), null, 2)}

ACTIVE TASKS:
${JSON.stringify(activeTasks, null, 2)}

POINTS DATA:
${JSON.stringify(pointsData.slice(-20), null, 2)}

USER QUESTION: "${query.question}"
${query.timeframe ? `TIMEFRAME: ${query.timeframe}` : ''}
${query.targetMember ? `FOCUS ON: ${query.targetMember}` : ''}

ANALYSIS INSTRUCTIONS:
1. Answer the user's specific question directly in ENGLISH
2. Provide relevant metrics and insights
3. Include actionable recommendations
4. Suggest data visualizations if helpful
5. Be encouraging and family-focused
6. Use specific numbers and percentages
7. Compare family members fairly and constructively
8. IMPORTANT: Do NOT include objects or JSON in response - only formatted text!

RESPONSE FORMAT (JSON):
{
  "answer": "Key Metrics:\nKid1:\n‚Ä¢ Tasks completed: 8\n‚Ä¢ Points earned: 33\n‚Ä¢ Active tasks: 3\n\nErik:\n‚Ä¢ Tasks completed: 2\n‚Ä¢ Points earned: 13\n‚Ä¢ Active tasks: 1\n\nüí° Insights:\nRest of analysis...",
  "data": {},
  "confidence": 0.9
}

EXAMPLE FORMATTED RESPONSES:
- "Erik completed 8 out of 10 tasks this week (80% completion rate)"
- "Sarah has been on a 5-day completion streak!"
- "The family completed 85% of tasks this week, up from 70% last week"
- "Johnny seems to struggle with chores on weekdays - consider moving some to weekends"`;
  }

  private parseAnalyticsResponse(response: string): AnalyticsResponse {
    try {
      // Clean up the response to extract JSON and remove control characters
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON found in analytics response');
      }

      // Clean control characters that can break JSON parsing
      const cleanedJson = jsonMatch[0]
        .replace(/[\x00-\x1F\x7F-\x9F]/g, '') // Remove control characters
        .replace(/\n/g, '\\n') // Escape remaining newlines
        .replace(/\r/g, '\\r') // Escape carriage returns
        .replace(/\t/g, '\\t'); // Escape tabs

      const parsed = JSON.parse(cleanedJson) as {
        answer: string;
        data?: any;
        confidence?: number;
      };

      return {
        answer: parsed.answer || "I couldn't analyze that data.",
        data: parsed.data || {},
        confidence: Math.max(0, Math.min(1, parsed.confidence || 0.5))
      };
    } catch (error) {
      console.error('Error parsing analytics response:', error);
      throw error; // Re-throw to trigger retry if needed
    }
  }

  // Quick data retrieval without AI processing
  getQuickStats(familyContext: FamilyContext): {
    totalActiveTasks: number;
    overdueTasks: number;
    completedThisWeek: number;
    topPerformer: string | null;
    familyPoints: number;
  } {
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

    const activeTasks = familyContext.activeTasks;
    const completionHistory = familyContext.completionHistory;
    const pointsData = familyContext.pointsData;

    const overdueTasks = activeTasks.filter(task => isTaskOverdue(new Date(task.dueDate))).length;
    const completedThisWeek = completionHistory.filter(task => 
      new Date(task.updatedAt || task.createdAt) >= oneWeekAgo
    ).length;

    // Find top performer by completion rate
    const memberPerformance = familyContext.members
      .filter(m => m.role === 'CHILD')
      .map(member => {
        const memberCompletions = completionHistory.filter(task => task.assignedTo === member.id);
        const memberActive = activeTasks.filter(task => task.assignedTo === member.id);
        const total = memberCompletions.length + memberActive.length;
        const rate = total > 0 ? memberCompletions.length / total : 0;
        return { name: member.name, rate };
      })
      .sort((a, b) => b.rate - a.rate);

    const topPerformer = memberPerformance.length > 0 ? memberPerformance[0].name : null;
    const familyPoints = pointsData.reduce((sum, p) => sum + p.amount, 0);

    return {
      totalActiveTasks: activeTasks.length,
      overdueTasks,
      completedThisWeek,
      topPerformer,
      familyPoints
    };
  }
}